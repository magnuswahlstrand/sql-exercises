<html>
<head>
    <title>HTMX</title>
    <script src="https://unpkg.com/htmx.org@1.9.10"
            integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC"
            crossorigin="anonymous"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/sse.js"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/preload.js"></script>


    <script>

        const local_storage_key = "{{.ID}}.complete"
        // htmx.logAll();
        {{ if .DebugMode }}
        htmx.on("htmx:sseMessage", function (evt) {
            if (evt.detail.type == "trigger_reload") {
                window.location.reload();
            }
        });
        {{ end }}

        function createIcon(icon) {
            return `<div class="ml-2 absolute">${icon}</div>`
        }

        function updateTitleIcon(icon) {
            document.querySelector("#title > div").innerHTML = icon
        }

        htmx.on("query_evaluated", function (evt) {
            const success = evt.detail.is_successful
            const icon = createIcon(success ? "✅" : "❌")
            document.querySelector("#result_header > div > div").innerHTML = icon
            if (success) {
                updateTitleIcon(icon)
                localStorage.setItem(local_storage_key, "true");
            }

        })

        const was_completed = localStorage.getItem(local_storage_key);
        console.log("was_completed", was_completed)
        console.log("was_completed", local_storage_key)
        document.addEventListener("DOMContentLoaded", function() {
            // TODO: Update BEFORE page is loaded?
            if (was_completed === "true") {
                updateTitleIcon(createIcon("✅"))
            }
        });
    </script>
</head>
<style>
    * {
        outline: 0px solid red;
    }
</style>
<body class="bg-orange-50" hx-boost="true">
{{ if .DebugMode }}
    <div hx-ext="sse" sse-connect="/sse?version={{.ServerVersion}}" sse-swap="trigger_reload">&nbsp;</div>
{{end}}

{{define "small_title"}}
    <div class="flex justify-center font-semibold text-lg pt-3 pb-1 border border-orange-700 border-x-0 bg-orange-300">
        {{.}}
        <div></div>
    </div>
{{end}}


<div class="container mx-auto">
    <div class="text-5xl font-bold flex" id="title">
        {{ .Title }}
        <div></div>
    </div>
    <script>
        if (was_completed === "true") updateTitleIcon(createIcon("✅"))
    </script>
    <div class="flex flex-row flex-wrap my-4 rounded border border-orange-700 border-t-0 bg-white">
        <aside class="w-full sm:w-1/2 border-orange-700 border-r-2 bg-stone-50">
            <div>
                {{template "small_title" "Task"}}
                <div class="h-24 p-2 text-lg italic">{{.Description}}</div>

                {{template "small_title" "Expected output"}}
                <div class="flex justify-center">
                    {{template "views/output_table" .Expected}}
                </div>
            </div>
        </aside>
        <main role="main" class="w-full sm:w-1/2">
            {{template "small_title" "Your query"}}
            <textarea class="w-full h-24 p-2 font-mono"
                      autofocus
                      name="query"
                      placeholder="Enter your query here..."
                      hx-get="http://localhost:3000/check/select_all"
                      hx-trigger="input changed delay:500ms"
                      hx-target="#results"
                      hx-indicator=".htmx-indicator">select * from employees</textarea>
            <div id="result_header">
                {{template "small_title" "Your output"}}
            </div>
            {{/*            <div id="message"></div>*/}}
            <div id="result_icon"></div>
            <div id="results" class="flex justify-center min-h-12">

            </div>
        </main>
    </div>


    <div class="flex justify-between">
        {{template "views/basic_button" dict "Url" .Previous "Text" "Previous Exercise"}}
        {{template "views/basic_button" dict "Url" .Next "Text" "Next Exercise"}}
    </div>
</div>

</body>
</html>